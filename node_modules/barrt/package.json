{
  "name": "barrt",
  "version": "1.1.5",
  "description": "A Bash Rspec-like Regression Test Framework",
  "main": "setup.sh",
  "scripts": {},
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mwolson/barrt-sh.git"
  },
  "author": {
    "name": "Michael Olson",
    "email": "mwolson@member.fsf.org"
  },
  "license": "MIT",
  "keywords": [
    "bash",
    "shell",
    "test",
    "rspec"
  ],
  "dependencies": {},
  "devDependencies": {},
  "readme": "# barrt - A Bash Rspec-like Regression Test Framework\n\n## Usage\n\n`barrt` was written to allow easy testing of commandline programs. The initial use case was making it possible to\nchoose \"Copy as cURL\" from a request in Google Chrome, drop the result into a test case, edit the URL slightly, and\nbegin checking the headers and response body. cURL support is available as a plugin in the\n[barrt-curl](https://github.com/mwolson/barrt-curl) module.\n\nOne of the design goals is to provide helpful error messages when tests fail. The framework may be extended with\nmodules that create custom \"expectations\" (which are functions like `expect` that describe the left side of a\ncomparison) that make sense when coupled with existing assertions like `to_equal`.\n\n`barrt` and `barrt-curl` are available as NPM modules. They don't use any Javascript. But having support for versioning\nand ease of installing releases is helpful even so.\n\nAn effort has been made to provide compatible versions of `grep` and `sed` as functions that support extended (Perl or\nPCRE-like) regular expression syntax which work on both Linux and OS X.\n\n## Examples\n\n### Simple test case\n\nIn a new file called `test/number-five.sh` (make sure to run `chmod +x` on it):\n\n```sh\n#!/bin/bash\n\n. $(dirname $0)/../setup.sh\n\ndescribe \"The number 5\"\n\nnum=5\n\nit \"is greater than 0\"\n\nexpect $num; to_be_greater_than 0\n```\n\n### Test case with chained assertions\n\n```sh\nit \"is a number less than 7\"\n\nexpect $num; to_be_numeric; to_be_less_than 7\n```\n\n### Test case using the barrt-curl module\n\nIn a new file called `test/example-request.sh` (make sure to run `chmod +x` on it):\n\n```sh\n#!/bin/bash\n\n. $(dirname $0)/../setup.sh\n\ndescribe \"Requests to example.com\"\n\nrecord_curl http://example.com\n\nit \"returns a 200 response with type text/html\"\n\nexpect_response_code; to_equal 200\nexpect_header Content-Type; to_equal text/html\n```\n\n### Output\n\n```sh\n$ ./runner.sh\n* Requests to example.com\n  - it returns a 200 response with type text/html\n* The number 5\n  - it is greater than 0\n  - it is a number less than 7\n\nTest Summary:\n  - 2 scenario(s) passed\n  - 0 scenario(s) skipped\n  - 0 scenario(s) failed\n```\n\n## Installation\n\nInstall the module from npm:\n\n```sh\nnpm i --save barrt\n```\n\nInstall any plugins you may want, such as [barrt-curl](https://github.com/mwolson/barrt-curl).\n\nEdit the `setup.sh` file in your test suite to include the following:\n\n```sh\n#!/bin/bash\n\nmodules=$(dirname \"$BASH_SOURCE\")/node_modules\n\n. \"$modules\"/barrt/setup.sh\n. \"$modules\"/barrt-curl/setup.sh\n\n# other plugins or setup tasks...\n```\n\nCreate a `runner.sh` file in your test suite with these contents:\n\n```sh\n#!/bin/bash\n\nmodules=$(dirname \"$BASH_SOURCE\")/node_modules\n\nexec \"$modules\"/barrt/runner.sh\n```\n\nWrite some tests and place them in the `test/` directory.\n\n## Run tests\n\nRun all tests:\n\n```sh\n./runner.sh\n```\n\nRun a single test:\n\n```sh\n./test/different_origin.sh\n```\n\nSkipping a test:\n\n```sh\nchmod -x ./test/skip_this_one.sh\n```\n\n## API\n\nThe following are provided as bash functions:\n\n### Core\n\n`describe $scenario_description`\n\n`it $test_case_description`\n\n### Expectations\n\n`expect $value_to_be_compared`\n\n### Assertions\n\n`to_be_empty`\n\n`to_not_be_empty`\n\n`to_equal $another_value`\n\n`to_be_numeric`\n\n`to_be_greater_than $another_number`\n\n`to_be_less_than $another_number`\n\n`to_be_between $range_1 $range_2`\n\n`to_contain $substring`\n\n`to_match $pattern`\n\n### Compatibility\n\n`grep $grep_arguments`\n\n`sed $sed_arguments`\n\n### Utility\n\n`echo_quoted $arguments_to_quote`\n\n`first_line`\n\n`remove_last_line`\n\n`fail $failure_reason`\n\n`soft_fail $failure_reason`\n\n`is_numeric $possible_number`\n\n### Defining new assertions\n\n`define_side_a $value_to_be_compared`\n\n`define_side_a_text $description_of_value_to_be_compared`\n\n`define_addl_text $additional_explanation_if_test_case_fails`\n\n`get_side_a`, `get_side_a_text`, `get_addl_text`\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "gitHead": "a832ae58be17bcae90c5aef10b2441d26f962ad6",
  "bugs": {
    "url": "https://github.com/mwolson/barrt-sh/issues"
  },
  "homepage": "https://github.com/mwolson/barrt-sh#readme",
  "_id": "barrt@1.1.5",
  "_shasum": "5970d88df1a596c65295c394d13c553dd98d6d79",
  "_from": "barrt@1.1.5"
}
